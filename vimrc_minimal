" if there's no .vim directory then we should create one
" Ensure modern Vim behavior
if !has('nvim') && &compatible
  set nocompatible
endif

" Set $MYVIMRC when loaded with -u
if !exists('$MYVIMRC')
  let $MYVIMRC = expand('<sfile>:p')
endif

" Ensure XDG paths are set
if !exists('$XDG_CONFIG_HOME')
  let $XDG_CONFIG_HOME = expand('~/.config')
endif
if !exists('$XDG_DATA_HOME')
  let $XDG_DATA_HOME = expand('~/.local/share')
endif

if !isdirectory(expand("~/.vim"))
  silent call mkdir(expand("~/.vim"), "p")
endif

" Ensure Vim is in nocompatible mode for modern versions
if v:version >= 700
  if &compatible
    set nocompatible
  endif
endif

set nu          " turn on line number
set sts=4       " softtabstop - number of spaces that a tab counts for when performing editing operations
set ts=4        " ts - tab stop
set sw=4        " sw - number of spaces to use for auto-indent
set expandtab   " make tab as spaces
set ai          " auto indent
set cpo+=$      " show $ at the end when editig a word or a sentence (cpo - a compatible-options)
set cursorline  " hightligh the text line of the cursor. useful to spot where the cursor is
set hidden      " make buffer becomes hidden when it is abandoed. Make moving around buffers easy even
                " when buffer is modified
set bg=dark     " when set to dark, vim will try to use colors that look good on a dark background

if has('nvim')
  vim.opt.shada = "'50,<1000,s100,n" .. nvim_shada
else
  set viminfo='50,<1000,s100,n~/.vim/viminfo
endif

" create swap dir if it is not exist
if !isdirectory(expand("$XDG_DATA_HOME/vim/swap"))
  silent call mkdir(expand("$XDG_DATA_HOME/vim/swap"), "p")
endif
set dir=~/.local/share/vim/swap

"create undo directory if is not exist
if !isdirectory(expand("~/.local/share/vim/undo"))
  silent call mkdir(expand("$XDG_DATA_HOME/vim/undo"), "p")
endif
set undofile
let &undodir = expand("$XDG_DATA_HOME/vim/undo")

let mapleader=";"
set history=1000
set cmdheight=2

set wildmenu
set wildmode=longest:full,full
set completeopt+=menuone,preview
set shm+=film
set hidden
set showmatch         " show match of {}, [], <>, ...

" when diff mode is activated, split buffers vertically and ignore white spaces
set diffopt+=vertical
set diffopt+=iwhite

if has("autocmd")

  " Enable file type detection.
  " Use the default filetype settings, so that mail gets 'tw' set to 72,
  " 'cindent' is on in C files, etc.
  " Also load indent files, to automatically do language-dependent indenting.
  filetype plugin indent on

  " Put these in an autocmd group, so that we can delete them easily.
  augroup vimrcEx
  au!
  " For all text files set 'textwidth' to 78 characters.
  " autocmd FileType text setlocal textwidth=78
  " When editing a file, always jump to the last known cursor position.
  " Don't do it when the position is invalid or when inside an event handler
  " (happens when dropping a file on gvim).
  autocmd BufReadPost *
  \ if line("'\"") > 0 && line("'\"") <= line("$") |
  \   exe "normal g`\"" |
  \ endif
  augroup END
endif

set laststatus=2
set statusline=%<%F\ %h%m%r\ %y%=%{v:register}\ %-14.(%l,%c%V%)\ %p

" map ctrl-return to open a line (for both normal and insert mode)
map <C-CR> o
imap <C-CR> <C-O>o

" map ctrl-shift-return for append at the end of line (for both normal and
" insert mode)
map <leader><CR>  o
imap <leader><CR> <C-O>o
" compress empty lines
nnoremap <leader>cln :v/./.,/./-1join<CR>
imap <leader>cln <C-O>:v/./.,/./-1join<CR>
" tab and shift-tab keys to navigate buffers back and forth
" opt-tab and shift-opt-tab keys to navigate tab pages
map <TAB>   :bn!<CR>
map <S-TAB> :bp!<CR>
" map %% for command line to quickly edit file in current directory
cabbr %% e <C-R>=expand("%:p:h") . "/" <CR>
" edit key mapping
cnoremap %% <C-R>=expand("%:h") . '/'<CR>
map <leader>ee :e %%
imap <leader>ee <C-O>:e %%

map <leader>em :e $MYVIMRC<CR>
imap <leader>em <C-O>:e $MYVIMRC<CR>

map <leader>es :sp %%
imap <leader>es <C-O>:sp %%

map <leader>ev :vsp %%
imap <leader>ev <C-O>:vsp %%
